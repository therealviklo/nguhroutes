import * as fs from 'fs';
import * as path from 'path';
import { fileURLToPath } from 'url';
import * as network from './network.ts';
import * as imp from './import.ts';
import * as exp from './export.ts';
import { parse } from 'jsonc-parser';

console.log("Loading network data...");
const __dirname = path.dirname(fileURLToPath(import.meta.url));
const networkJsonPath = path.join(__dirname, './json/network.jsonc');
const networkData = parse(fs.readFileSync(networkJsonPath, 'utf-8'));
console.log("Finished loading network data");

console.log("Parsing network data...");
const net = imp.parse(networkData, false);
console.log("Finished parsing network data");
console.log("Generating routes...");
const startGen = Date.now();
const routes = network.generateRoutes(net);
const endGen = Date.now();
const genTimeSec = ((endGen - startGen) / 1000).toFixed(2);
console.log(`Finished generating routes (took ${genTimeSec} seconds)`);
console.log("Exporting routes...");
const exportPath = path.join(__dirname, "../public/gen/json/routes.json");
fs.mkdirSync(path.dirname(exportPath), { recursive: true });
exp.exportRoutes(routes, exportPath);
console.log("Finished exporting routes");

console.log("Parsing network data (no Nether)...");
const netNN = imp.parse(networkData, true);
console.log("Finished parsing network data (no Nether)");
console.log("Generating routes (no Nether)...");
const startGenNN = Date.now();
const routesNN = network.generateRoutes(netNN);
const endGenNN = Date.now();
const genTimeSecNN = ((endGenNN - startGenNN) / 1000).toFixed(2);
console.log(`Finished generating routes (no Nether) (took ${genTimeSecNN} seconds)`);
console.log("Exporting routes (no Nether)...");
const exportPathNN = path.join(__dirname, "../public/gen/json/routes_no_nether.json");
fs.mkdirSync(path.dirname(exportPathNN), { recursive: true });
exp.exportRoutes(routesNN, exportPathNN);
console.log("Finished exporting routes (no Nether)");